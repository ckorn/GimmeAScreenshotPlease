@page "/client"
@inject ILocalStorageService localStorage

<h1>Client</h1>

<Fields>
    <Field ColumnSize="ColumnSize.Is4.OnDesktop">
        <Field Horizontal="true">
            <FieldLabel>Target:</FieldLabel>
            <FieldBody>
                <TextEdit @bind-Text="@target"></TextEdit>
            </FieldBody>
        </Field>
    </Field>
    <Field ColumnSize="ColumnSize.Is2.OnDesktop">
        <Field Horizontal="true">
            <FieldLabel>Ratio:</FieldLabel>
            <FieldBody>
                <Select TValue="int" @bind-SelectedValue="@ratioSelected">
                    @foreach (int ratio in ratioList)
                    {
                        <SelectItem Value="@ratio">@ratio %</SelectItem>
                    }
                </Select>
            </FieldBody>
        </Field>
    </Field>
    <Field ColumnSize="ColumnSize.Is2.OnDesktop">
        <Button Color="Color.Primary" Clicked="@(async () => await GetScreensAsync())">Get screens</Button>
    </Field>
    <Field ColumnSize="ColumnSize.Is2.OnDesktop">
        <SelectList TItem="ScreenInformation"
                    TValue="int"
                    Data="@screenInformationList"
                    TextField="@((item)=>item.Name)"
                    ValueField="@((item)=>item.Index)"
                    SelectedValue="@screenInformationIndex"
                    SelectedValueChanged="@OnSelectedScreenChanged" />
    </Field>
    <Field ColumnSize="ColumnSize.Is1.OnDesktop">
        <Button Color="Color.Primary" Clicked="@(async () => await GetAsync())">Get</Button>
    </Field>
</Fields>

<p><img hidden="@imageDataHidden" src="@imageData" /></p>

@if ((screenInformationList?.Count ?? 0) > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Index</th>
                <th>Name</th>
                <th>Width</th>
                <th>Height</th>
            </tr>
        </thead>
        <tbody>
            @foreach (ScreenInformation screenInformation in screenInformationList)
            {
                <tr>
                    <td>@screenInformation.Index</td>
                    <td>@screenInformation.Name</td>
                    <td>@screenInformation.Width</td>
                    <td>@screenInformation.Height</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string target = "";
    private string imageData = "";
    private bool imageDataHidden = true;
    private List<int> ratioList = new List<int>();
    private int ratioSelected = 5;
    private IClientWorkflow clientWorkflow;
    private IReadOnlyList<ScreenInformation> screenInformationList = new List<ScreenInformation>();
    private int screenInformationIndex = -1;

    protected override Task OnInitializedAsync()
    {
        clientWorkflow = new ClientWorkflow(new ScreenshotClient(new HttpSender(),
            new BinaryDecoder(), new JsonSerializer(), new JsonDeserializer()));
        for (int i = 5; i <= 100; i+=5)
        {
            ratioList.Add(i);
        }
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadLocalStorage();
            StateHasChanged();
        }
    }

    private void OnSelectedScreenChanged(int value)
    {
        screenInformationIndex = value;
    }

    private async Task GetAsync()
    {
        string base64 = "";
        if (screenInformationIndex < 0)
        {
            base64 = await this.clientWorkflow.GetScreenshotPrimaryScreenAsBase64Async(this.target, ratioSelected);
        }
        else
        {
            ScreenInformation screenInformation = this.screenInformationList.Single(x => x.Index == screenInformationIndex);
            screenInformation.Ratio = ratioSelected;
            base64 = await this.clientWorkflow.GetScreenshotForScreenAsBase64Async(this.target, screenInformation);
        }
        this.imageData = (!string.IsNullOrEmpty(base64)) ? $"data:image/jpeg;base64,{base64}" : string.Empty;
        this.imageDataHidden = string.IsNullOrEmpty(base64);
        await SaveLocalStorage();
    }

    private async Task GetScreensAsync()
    {
        screenInformationList = await this.clientWorkflow.GetScreenInformationListAsync(this.target);
        screenInformationIndex = ((screenInformationList?.Count ?? 0) > 0) ? screenInformationList.First().Index : -1;
    }

    private async Task SaveLocalStorage()
    {
        await localStorage.SetItemAsync("target", this.target);
        await localStorage.SetItemAsync("ratio", this.ratioSelected);
    }

    private async Task LoadLocalStorage()
    {
        this.target = await localStorage.GetItemAsync<string>("target");
        int ratio = await localStorage.GetItemAsync<int>("ratio");
        if (this.ratioList.Contains(ratio))
        {
            this.ratioSelected = ratio;
        }
    }
}
